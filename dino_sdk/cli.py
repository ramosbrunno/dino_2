#!/usr/bin/env python3
"""
Dino SDK - Interface de Linha de Comando
Ferramenta para ingest√£o batch de dados no Databricks
"""

import click
import os
import sys
import logging
from pathlib import Path
from typing import Optional, Dict, Any, List
import json
import time
from datetime import datetime

# Imports locais
from ingestion_engine import IngestionEngine
from workflow_manager import WorkflowManager
from genie_assistant import GenieAssistant


def setup_logging(debug: bool = False):
    """Configura logging baseado no n√≠vel de debug"""
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


@click.command()
@click.option('--target-schema', required=True, 
              help='Schema destino da ingest√£o')
@click.option('--table-name', required=True, 
              help='Nome l√≥gico da entidade a ser processada')
@click.option('--file-path', required=True, 
              help='Caminho completo do arquivo a ser ingerido no storage RAW')
@click.option('--delimiter', default=',', 
              help='Delimitador utilizado no arquivo de origem (padr√£o: ",")')
@click.option('--is-automated', is_flag=True, 
              help='Se true, realiza ingest√£o assim que o arquivo √© colocado no diret√≥rio (file arrival)')
@click.option('--has-genie', is_flag=True, 
              help='Se true, cria sala Genie e cataloga√ß√£o Unity Catalog Assistant')
@click.option('--catalog-name', 
              help='Nome do cat√°logo Unity Catalog (usa padr√£o se n√£o informado)')
@click.option('--output-mode', type=click.Choice(['append', 'overwrite', 'merge']), 
              default='append', help='Modo de escrita (padr√£o: append)')
@click.option('--file-format', type=click.Choice(['csv', 'json', 'parquet', 'delta', 'avro']), 
              help='Formato do arquivo (detectado automaticamente se n√£o informado)')
@click.option('--debug', is_flag=True, 
              help='Ativar modo debug com logs detalhados')
def main(target_schema, table_name, file_path, delimiter, is_automated, 
         has_genie, catalog_name, output_mode, file_format, debug):
    """
    Dino SDK - Ferramenta de ingest√£o para Databricks
    
    Realiza ingest√£o de dados com suporte a:
    - Ingest√£o batch e streaming com file arrival
    - M√∫ltiplos formatos (CSV, JSON, Parquet, Delta, Avro)
    - Integra√ß√£o com Genie Assistant
    - Metadados de auditoria autom√°ticos
    
    PR√â-REQUISITOS:
    - Schema de destino deve existir
    - Permiss√µes adequadas no Unity Catalog
    """
    
    # Configurar logging
    setup_logging(debug)
    
    # Configurar vari√°veis de ambiente para debug
    if debug:
        os.environ['DINO_DEBUG'] = 'true'
    
    print("ü¶ï Dino SDK - Data Ingestion v1.0.0")
    print("=" * 50)
    
    try:
        # Validar entrada
        _validate_inputs(target_schema, table_name, file_path)
        
        # Criar engine de ingest√£o
        print(f"‚öôÔ∏è Configurando ingest√£o...")
        print(f"   üìä Schema: {target_schema}")
        print(f"   üìã Tabela: {table_name}")
        print(f"   üìÅ Origem: {file_path}")
        print(f"   üíæ Modo: {output_mode}")
        print(f"   üîÑ Automatizada: {'Sim' if is_automated else 'N√£o'}")
        
        engine = IngestionEngine(
            target_schema=target_schema,
            table_name=table_name,
            file_path=file_path,
            delimiter=delimiter,
            catalog_name=catalog_name,
            output_mode=output_mode,
            file_format=file_format
        )
        
        # Executar ingest√£o
        print(f"\nüöÄ Executando ingest√£o...")
        result = engine.execute_ingestion(is_automated=is_automated)
        
        if not result['success']:
            print(f"‚ùå Erro na ingest√£o: {result['error']}")
            sys.exit(1)
        
        print(f"‚úÖ Ingest√£o configurada com sucesso!")
        print(f"   üìä Tabela: {result['table_full_name']}")
        print(f"   üìã Formato: {result['detected_format']}")
        
        if is_automated:
            print(f"   ÔøΩ Checkpoint: {result.get('checkpoint_location', 'N/A')}")
            print(f"   ÔøΩüìù Arquivo streaming: {result['ingestion_file']}")
        else:
            print(f"   üìù Arquivo batch: {result['ingestion_file']}")
        
        # Criar workflow se necess√°rio
        if is_automated:
            print(f"\nüîÑ Criando workflow automatizado...")
            
            workflow_manager = WorkflowManager(target_schema, table_name)
            
            workflow_result = workflow_manager.create_auto_ingestion_workflow(
                source_path=file_path,
                target_table=result['table_full_name'],
                checkpoint_location=result.get('checkpoint_location', ''),
                file_format=result['detected_format'],
                delimiter=delimiter
            )
            
            if workflow_result['success']:
                print(f"‚úÖ Workflow criado: {workflow_result['workflow_name']}")
                print(f"   üìù Arquivo: {workflow_result.get('workflow_file', 'N/A')}")
            else:
                print(f"‚ö†Ô∏è Erro no workflow: {workflow_result['error']}")
        
        # Configurar Genie se solicitado
        if has_genie:
            print(f"\nüßû Configurando Genie Assistant...")
            
            genie = GenieAssistant(
                catalog_name=result['catalog_name'],
                schema_name=target_schema,
                table_name=table_name
            )
            
            genie_result = genie.setup_genie_room_and_cataloging()
            
            if genie_result['success']:
                print(f"‚úÖ Genie configurado!")
                print(f"   üè† Sala: {genie_result['room_name']}")
                print(f"   üìö Status: {genie_result['catalog_status']}")
                if genie_result.get('room_url'):
                    print(f"   üîó URL: {genie_result['room_url']}")
            else:
                print(f"‚ö†Ô∏è Erro no Genie: {genie_result['error']}")
        
        # Resumo final
        print(f"\nüéâ Processo conclu√≠do!")
        print(f"üìã Pr√≥ximos passos:")
        print(f"   1. Execute o arquivo {result['ingestion_file']} em um notebook Databricks")
        
        if is_automated:
            print(f"   2. Importe o workflow JSON no Databricks Jobs para automa√ß√£o")
        
        if has_genie:
            print(f"   3. Acesse a sala Genie para consultas em linguagem natural")
        
        print(f"   4. Monitore a tabela {result['table_full_name']} no Unity Catalog")
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
        if debug:
            import traceback
            traceback.print_exc()
        sys.exit(1)


def _validate_inputs(target_schema: str, table_name: str, file_path: str):
    """Valida entradas do usu√°rio"""
    
    # Validar nomes de schema e tabela
    if not target_schema.replace('_', '').isalnum():
        raise ValueError("target_schema deve conter apenas letras, n√∫meros e underscore")
    
    if not table_name.replace('_', '').isalnum():
        raise ValueError("table_name deve conter apenas letras, n√∫meros e underscore")
    
    # Validar path
    if not file_path or file_path.isspace():
        raise ValueError("file_path n√£o pode estar vazio")


def _validate_cron_expression(cron_expr: str):
    """Valida express√£o cron b√°sica"""
    parts = cron_expr.split()
    if len(parts) != 5:
        raise ValueError("Express√£o cron deve ter 5 campos: 'minuto hora dia m√™s dia_semana'")
    
    # Valida√ß√£o b√°sica dos campos
    try:
        for i, part in enumerate(parts):
            if part != '*' and not part.isdigit() and '/' not in part and ',' not in part and '-' not in part:
                raise ValueError(f"Campo {i+1} da express√£o cron inv√°lido: {part}")
    except:
        raise ValueError("Express√£o cron inv√°lida. Use formato: 'minuto hora dia m√™s dia_semana'")


def show_examples():
    """Mostra exemplos de uso do CLI"""
    examples = [
        {
            "title": "Ingest√£o simples de CSV",
            "command": "dino-ingest --target-schema bronze --table-name customers --file-path /Volumes/main/raw/customers.csv"
        },
        {
            "title": "Ingest√£o com workflow",
            "command": "dino-ingest --target-schema bronze --table-name orders --file-path /Volumes/main/raw/orders.json --create-workflow"
        },
        {
            "title": "Ingest√£o agendada com Genie",
            "command": "dino-ingest --target-schema bronze --table-name sales --file-path /Volumes/main/raw/sales.csv --schedule-cron '0 6 * * *' --has-genie"
        },
        {
            "title": "Ingest√£o com particionamento",
            "command": "dino-ingest --target-schema bronze --table-name events --file-path /Volumes/main/raw/events.parquet --partition-columns 'year,month'"
        },
        {
            "title": "Ingest√£o com overwrite",
            "command": "dino-ingest --target-schema bronze --table-name products --file-path /Volumes/main/raw/products.csv --output-mode overwrite"
        }
    ]
    
    print("üìö Exemplos de uso do Dino SDK:")
    print("=" * 50)
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. {example['title']}:")
        print(f"   {example['command']}")
    
    print(f"\nüí° Use --help para ver todas as op√ß√µes dispon√≠veis")


if __name__ == '__main__':
    main()
